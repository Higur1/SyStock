// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model Company{
  id String @id @default(uuid())
  name String @unique
  cnpj String @unique
  status_company_id Int 
  subscription_plans Int
  
  Category Category[]
  Supplyer Supplyer[]
  Product Product[]
  Batch Batch[]
  User User[]
  Token_Recovery Token_Recovery[]
  Address Address[]
  Phone Phone[]

  company_status_company_id_fk Status_Company @relation(fields: [status_company_id], references: [id])
  company_subscription_plan_fk Subscription_Plan @relation(fields: [subscription_plans], references: [id])


  @@map("company")
}
model Phone{
  id Int @id @default(autoincrement())
  phone String  
  company_id String @default("")
  supplyer_id String @default("")

  phone_company_id_fk Company @relation(fields: [company_id], references: [id])
  phone_supplyer_id_fk Supplyer @relation(fields: [supplyer_id], references: [id])

  @@map("phone")
}
model Address{
  id Int @id @default(autoincrement())
  cep String
  street String
  number Int
  district String
  state String
  city String
  complement String
  company_id String @default("")
  supplyer_id String @default("")
 
  address_company_id Company @relation(fields: [company_id], references: [id])
  address_supplyer_id Supplyer @relation(fields: [supplyer_id], references: [id])

  @@map("address")
}
model Status_Company{
  id Int @id @default(autoincrement())
  status String @default("Active")

  Company Company[]

  @@map("status_company")
}
model Subscription_Plan{
  id Int @id @default(autoincrement())
  name String @default("FREE")
  description String

  Company Company[]

  @@map("subscription_plan")
}
model Category{
  id Int @id @default(autoincrement())
  name String 
  company_id String

  Product Product[]

  category_company_id_fk Company @relation(fields: [company_id], references: [id])
  
  @@map("category")
}
model Product{
  id Int @id @default(autoincrement())
  name String 
  company_id String
  category_id Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  price Decimal

  Batch Batch[]

  product_company_id_fk Company @relation(fields: [company_id], references: [id])
  product_category_id_fk Category @relation(fields: [category_id], references: [id])

  @@map("product")
}
model Supplyer{
  id String @id @default(uuid())
  name String
  company_id String 
  address_id Int
  email String

  Batch Batch[]
  Address Address[]
  Phone Phone[]

  company_id_supplyer_fk Company @relation(fields: [company_id], references: [id]) 

  @@map("supplyer")
}
model Batch{
  id Int @id @default(autoincrement())
  product_id Int
  supplyer_id String
  company_id String
  createAt DateTime
  updateAt DateTime
  quantity Int @default(0)

  batch_product_id_fk Product @relation(fields: [product_id], references: [id])
  batch_supplyer_id_fk Supplyer @relation(fields: [supplyer_id], references: [id])
  batch_company_id_fk Company @relation(fields: [company_id], references: [id])

  @@map("batch")
}
model User_Type{
  id Int @id @default(autoincrement())
  name String @default("Common")

  User User[]

  @@map("user_type")
}
model User{
  id Int @id @default(autoincrement())
  company_id String
  user_type_id Int
  user_login String
  user_password String
  name String 
  email String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  
  Token_Recovery Token_Recovery[]

  user_company_id Company @relation(fields: [company_id], references: [id])
  user_user_type_id_fk User_Type @relation(fields: [user_type_id], references: [id])

  @@map("user")
}
model Token_Recovery{
  id String @id @default(uuid())
  token_status Boolean @default(true)
  company_id String
  user_id Int

  token_recovery_company_id_fk Company @relation(fields: [company_id], references: [id])
  token_recovery_user_id_fk User @relation(fields: [user_id], references: [id])

  @@map("token_recovery")
}