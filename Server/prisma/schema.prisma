// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  format = "svg"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model eTypeUser {
  id   Int    @id @default(autoincrement())
  type String

  User User[]
}

model eValitadionStatus {
  id   Int    @id @default(autoincrement())
  type String

  Batch Batch[]
}

model eSalesStatus {
  id   Int    @id @default(autoincrement())
  type String

  Sales Sales[]
}

model ePaymentMethod {
  id   Int    @id @default(autoincrement())
  type String

  Sales Sales[]
}

model eTypeAction {
  id   Int    @id @default(autoincrement())
  type String
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  login          String
  password       String
  email          String
  createdAt      DateTime @default(now())
  updateAt       DateTime @updatedAt
  user_type      Int      @default(2)
  excludedStatus Boolean

  user_type_fk eTypeUser @relation(fields: [user_type], references: [id])

  Sales          Sales[]
  Fill           Fill[]
  token_Recovery token_Recovery[]
  logFills       logFill[]
  logProdutos    logProduct[]

  @@map("user")
}

model Pre_User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pre_user")
}

model Supplier {
  id             Int      @id @default(autoincrement())
  name           String
  phone          String
  email          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  excludedStatus Boolean

  Fill Fill[]

  @@map("suppliers")
}

model Fill {
  id          Int      @id @default(autoincrement())
  totalPrice  Decimal
  observation String
  supplier_id Int
  user_id     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  logFill    logFill[]
  Batch_Fill Batch_Fill[]

  supplier_id_fk  Supplier @relation(fields: [supplier_id], references: [id])
  user_id_fill_fk User     @relation(fields: [user_id], references: [id])

  @@map("fill")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]

  @@map("category")
}

model Product {
  id                   Int      @id @default(autoincrement())
  name                 String
  price                Decimal
  costPrice            Decimal
  minimunQuantity      Int
  observation          String
  totalQuantityInStock Int
  category_id          Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  excludedStatus       Boolean

  Product_Sales Product_Sales[]
  Batch         Batch[]
  logProduto    logProduct[]

  category_id_fk Category? @relation(fields: [category_id], references: [id])

  @@map("product")
}

model Batch {
  id                 Int       @id @default(autoincrement())
  expirationDate     DateTime?
  quantity           Int
  deletionStatus     Boolean
  dateTimeEmptyStock DateTime?
  product_id         Int
  eValidationStatus  Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  Batch_Fill Batch_Fill[]

  eValidationStatus_fk eValitadionStatus @relation(fields: [eValidationStatus], references: [id])
  product_id_fk        Product           @relation(fields: [product_id], references: [id])

  @@map("batch")
}

model Batch_Fill {
  batch_id  Int
  fill_id   Int
  quantity  Int
  costPrice Decimal
  subTotal  Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  batch_id_fk Batch @relation(fields: [batch_id], references: [id])
  fill_id_fk  Fill  @relation(fields: [fill_id], references: [id])

  @@id(name: "batch_Fill_id", [batch_id, fill_id])
}

model Sales {
  id             Int      @id @default(autoincrement())
  dateTime       DateTime
  user_id        Int
  observation    String
  totalPrice     Decimal
  paymentMade    Boolean
  eSalesStatus   Int
  ePaymentMethod Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  excludedStatus Boolean

  Product_Sales Product_Sales[]

  eSalesStatus_fk   eSalesStatus   @relation(fields: [eSalesStatus], references: [id])
  ePaymentMethod_fk ePaymentMethod @relation(fields: [ePaymentMethod], references: [id])
  user_id_fk        User           @relation(fields: [user_id], references: [id])

  @@map("sales")
}

model Product_Sales {
  id         Int      @id @default(autoincrement())
  product_id Int
  sales_id   Int
  quantity   Int
  totalPrice Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product_id_fk Product @relation(fields: [product_id], references: [id])
  sales_id_fk   Sales   @relation(fields: [sales_id], references: [id])

  @@map("product_sales")
}

model logSales {
  id             Int      @id @default(autoincrement())
  sales_id       Int
  totalPrice     Decimal
  user_name      String
  dateTime       DateTime @default(now())
  ePaymentMethod String

  @@map("log_sales")
}

model logProduct {
  id          Int      @id @default(autoincrement())
  produto_id  Int
  quantity    Int
  user_id     Int
  dateTime    DateTime @default(now())
  eTypeAction Int
  motivo      String

  product            Product? @relation(fields: [produto_id], references: [id])
  user_id_product_fk User?    @relation(fields: [user_id], references: [id])

  @@map("log_product")
}

model logFill {
  id      Int @id @default(autoincrement())
  fill_id Int
  user_id Int

  fill            Fill @relation(fields: [fill_id], references: [id])
  user_id_fill_fk User @relation(fields: [user_id], references: [id])

  @@map("log_fill")
}

model token_Recovery {
  token     String   @id @default(uuid())
  user_id   Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user_id_token_fk User @relation(fields: [user_id], references: [id])

  @@map("token_recovery")
}
